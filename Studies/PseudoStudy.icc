template<
  class InputT,
  class FunctionT
  >
void PseudoStudy<InputT,FunctionT>::setupCorrelationResults(const int& _size){

  int Xbinning = 50;
  double expXDown = 0.;
  double expXUp = 0.;

  int Ybinning = 50;
  double expYDown = 0.;
  double expYUp = 0.;

  std::ostringstream name("");
  for (int col = 0; col < _size; ++col)
  {
    expXUp   = 2.*(m_expectedValues.at(col));

    for (int row = 0; row < _size; ++row)
    {
      name.str("correlation_");
      name << col << "_" << row;
      expYUp   = 2.*(m_expectedValues.at(row));
      m_correlations[col][row] = TH2D(name.str().c_str(),"",
                                      Xbinning,expXDown,expXUp,
                                      Ybinning,expYDown,expYUp
                                      );
    }
  }
    
}

template<
  class InputT,
  class FunctionT
  >
void PseudoStudy<InputT,FunctionT>::setupResults(const int& _size){
    
  double expMeanDown = 0.;
  double expMeanUp = 0.;

  double expSigmaDown = 0.;
  double expSigmaUp = 0.;

  for (int i = 0; i < _size; ++i)
  {
    expSigmaDown = 0;
    expSigmaUp = 500;

    if(m_expectedValues.at(i)>2e3){
      expMeanDown = m_expectedValues.at(i)-1000;
      expMeanUp = (m_expectedValues.at(i))+1000;
    }
    else{
      expMeanDown = 0.1*m_expectedValues.at(i);
      expMeanUp = 2.*(m_expectedValues.at(i));
    }

    m_pulls[i] = TH1D(TString::Format("pull_par%i",i).Data(),"pull",80,-8,8);
    m_pulls[i].GetXaxis()->SetTitle(TString::Format("pull (%i)",i).Data());

    if(m_expectedValues.at(i)>2e3)
      m_bias[i] = TH1D(TString::Format("bias_par%i",i).Data(),"bias",800,-1.6e3,1.6e3);
    else
      m_bias[i] = TH1D(TString::Format("bias_par%i",i).Data(),"bias",800,-400,400);

    m_bias[i].GetXaxis()->SetTitle(TString::Format("bias (%i)",i).Data());

    //m_pulls[i].SetBit(TH1::kCanRebin);

    m_MigradPulls[i] = TH1D(addItemToText<int>("Migrad_pull_par",i).c_str(),"pull",80,-8,8);
    m_MigradPulls[i].GetXaxis()->SetTitle(addItemToText<int>("pull: ",i).c_str());
    //m_MigradPulls[i].SetBit(TH1::kCanRebin);

      m_means[i] = TH1D(addItemToText<int>("mean_par",i).c_str(),"mean fitted",
                        100,expMeanDown,expMeanUp);
    
    m_means[i].GetXaxis()->SetTitle(addItemToText<int>("fitted: ",i).c_str());
    //m_means[i].SetBit(TH1::kCanRebin);

    m_sigmas[i] = TH1D(addItemToText<int>("sigma_par",i).c_str(),"sigma fitted",
                       250,expSigmaDown,expSigmaUp);
    m_sigmas[i].GetXaxis()->SetTitle(addItemToText<int>("fitted error: ",i).c_str());
    //m_sigmas[i].SetBit(TH1::kCanRebin);
  }

  setupCorrelationResults(_size);
}

template<
  class InputT,
  class FunctionT
  >
void PseudoStudy<InputT,FunctionT>::treatResultsFromMinimizer(const std::vector<std::string>* _names){
  std::vector<TH1D>::iterator rItr = m_means.begin()    ;
  std::vector<TH1D>::iterator rEnd = m_means.end()      ;
  for (short i = 0; rItr!=rEnd; ++rItr,i++)
  {
    rItr->GetXaxis()->SetTitle(TString::Format("fitted %s",_names->at(i).c_str()).Data());
  }

  rItr = m_sigmas.begin()    ;
  rEnd = m_sigmas.end()      ;
  for (short i = 0; rItr!=rEnd; ++rItr,i++)
  {
    rItr->GetXaxis()->SetTitle(TString::Format("#sigma(%s)",_names->at(i).c_str()).Data());
  }

  rItr = m_pulls.begin()    ;
  rEnd = m_pulls.end()      ;
  for (short i = 0; rItr!=rEnd; ++rItr,i++)
  {
    rItr->GetXaxis()->SetTitle(TString::Format("pull(%s)",_names->at(i).c_str()).Data());
  }

  rItr = m_bias.begin()    ;
  rEnd = m_bias.end()      ;
  for (short i = 0; rItr!=rEnd; ++rItr,i++)
  {
    rItr->GetXaxis()->SetTitle(TString::Format("bias(%s)",_names->at(i).c_str()).Data());
  }
}

template<
  class InputT,
  class FunctionT
  >
PseudoStudy<InputT,FunctionT>::PseudoStudy(const std::vector<TH1*>& _templates,
                                           const std::vector<double>& _expected,
                                           const std::vector<double>& _expectedErrors,
                                           const double& _dataIntegral,
                                           const int& _thr,
                                           const int& _iters
                                           ):
  m_input(new InputT()),
  m_fitter(),
  m_creator(0),
  m_fitConfigFile(""),       
  m_fitEngine("Minuit2"),       
  m_fitMode  ("Migrad"),       
  m_baseName("PseudoStudy_"),
  m_templateTH1s(_templates.size(),0),
  m_total(0),
  m_resultTH1s(),
  m_maxLLH(new TH1D("maxLLH",";max(logLH);N",400,-2000,0)),
  m_threads(_thr),
  m_iterations(_iters),
  m_TRand3(),
  m_pulls(_templates.size()),
  m_bias(_templates.size()),
  m_MigradPulls(_templates.size()),
  m_means(_templates.size()),
  m_sigmas(_templates.size()),
  m_correlations(_templates.size(),std::vector<TH2D>(_templates.size())),
  m_expectedValues    (_expected),   
  m_expectedErrors    (_expectedErrors),   
  m_dataIntegral      (_dataIntegral),   
  m_fitValues(_templates.size(),0.),
  m_fitErrorsUp(_templates.size(),0.),
  m_fitErrorsDown(_templates.size(),0.),
  m_fitErrorsStatus(_templates.size(),0.),
  m_doPanicPrint(false),
  m_verbosity(2),
  m_resultCanvas(3)
{
  //create deep copies!
  for (int i = 0; i < _templates.size(); ++i)
  {
    std::string name = _templates.at(i)->GetName();
    name += "_pseudo";
    m_templateTH1s[i] = dynamic_cast<TH1*>(_templates.at(i)->Clone(name.c_str()));
    m_templateTH1s[i]->SetDirectory(0);
  }

    
    
  setupResults(_templates.size());
}


template<
  class InputT,
  class FunctionT
  >
void PseudoStudy<InputT,FunctionT>::getResultsOfParameter(const int& _idx,std::vector<TH1*>& _results){

  _results.clear();
    
  if(!(_idx<m_templateTH1s.size()))
    return;

  _results.resize(4);
    
  try{
    _results[0] = &(m_means.at(_idx));
  }
  catch(std::exception& exc){
    std::cerr << __FILE__ <<":"<< __LINE__ <<"\t unable to return m_means item at "<< _idx <<" due to \n\t"<< exc.what()<<std::endl;
    _results[0] = 0;
  }

  try{
    _results[1] = &(m_sigmas.at(_idx));
  }
  catch(std::exception& exc){
    std::cerr << __FILE__ <<":"<< __LINE__ <<"\t unable to return m_sigmas item at "
              << _idx <<" due to \n\t"<< exc.what()<<std::endl;
    _results[1] = 0;
  }

    
  try{
    _results[2] = &(m_pulls.at(_idx));
  }
  catch(std::exception& exc){
    std::cerr << __FILE__ <<":"<< __LINE__ <<"\t unable to return m_pulls item at "<< _idx<<" due to \n\t"<< exc.what()<<std::endl;
    _results[2] = 0;
  }

 
  try{
    _results[3] = &(m_bias.at(_idx));
  }
  catch(std::exception& exc){
    std::cerr << __FILE__ <<":"<< __LINE__ <<"\t unable to return m_pulls item at "<< _idx<<" due to \n\t"<< exc.what()<<std::endl;
    _results[3] = 0;
  }

  return;
}

template<
  class InputT,
  class FunctionT
  >
void PseudoStudy<InputT,FunctionT>::printResults(){
  
  std::cout << "-- meas --\n";
  std::vector<TH1D>::const_iterator rItr = m_means.begin()    ;
  std::vector<TH1D>::const_iterator rEnd = m_means.end()      ;
  std::string rootFileName = m_baseName;
  rootFileName += "_results.root";
  TFile aNewFile(rootFileName.c_str(),"RECREATE");

  m_maxLLH->SetDirectory(aNewFile.GetDirectory("/"));
  m_maxLLH->Write();

  for (; rItr!=rEnd; ++rItr)
  {
    std::cout << rItr->GetName() << "("<< rItr->GetEntries()<<") " << std::setprecision(3)
              <<"mean: " << double(rItr->GetMean())
              <<", rms: " << double(rItr->GetRMS());
    if(m_verbosity<3)
      std::cout  <<", xmin/xmax: " << rItr->GetXaxis()->GetXmin() << "/" <<  rItr->GetXaxis()->GetXmax() 
                 <<", u/o: " << rItr->GetBinContent(0) << "/" <<   rItr->GetBinContent(rItr->GetNbinsX()+1);
    std::cout << std::endl;
    rItr->Write();
  }

  std::cout << "-- sigmas --\n";
  rItr = m_sigmas.begin()    ;
  rEnd = m_sigmas.end()      ;
  for (; rItr!=rEnd; ++rItr)
  {
    std::cout << rItr->GetName() << "("<< rItr->GetEntries()<<") "
              <<"mean: " << double(rItr->GetMean())
              <<", rms: " << double(rItr->GetRMS());
    if(m_verbosity<3)
      std::cout   <<", xmin/xmax: " << rItr->GetXaxis()->GetXmin() << "/" <<  rItr->GetXaxis()->GetXmax() 
                  <<", u/o: " << rItr->GetBinContent(0) << "/" <<   rItr->GetBinContent(rItr->GetNbinsX()+1);
    std::cout << std::endl;
    rItr->Write();
  }

  std::cout << "-- pulls --\n";
  rItr = m_pulls.begin()    ;
  rEnd = m_pulls.end()      ;
  for (; rItr!=rEnd; ++rItr)
  {
    std::cout << rItr->GetName() << "("<< rItr->GetEntries()<<") "
              <<"mean: " << rItr->GetMean()
              <<", rms: " << rItr->GetRMS();
    if(m_verbosity<3)
      std::cout  <<", xmin/xmax: " << rItr->GetXaxis()->GetXmin() << "/" <<  rItr->GetXaxis()->GetXmax()
                 <<", u/o: " << rItr->GetBinContent(0) << "/" <<   rItr->GetBinContent(rItr->GetNbinsX()+1);
    std::cout       << std::endl;
    rItr->Write();

  }

  std::cout << "-- bias --\n";
  rItr = m_bias.begin()    ;
  rEnd = m_bias.end()      ;
  for (; rItr!=rEnd; ++rItr)
  {
    std::cout << rItr->GetName() << "("<< rItr->GetEntries()<<") "
              <<"mean: " << rItr->GetMean()
              <<", rms: " << rItr->GetRMS();
    if(m_verbosity<3)
      std::cout  <<", xmin/xmax: " << rItr->GetXaxis()->GetXmin() << "/" <<  rItr->GetXaxis()->GetXmax()
                 <<", u/o: " << rItr->GetBinContent(0) << "/" <<   rItr->GetBinContent(rItr->GetNbinsX()+1);
    std::cout       << std::endl;
    rItr->Write();

  }


  std::cout << "-- Migrad pulls --\n";
  rItr = m_MigradPulls.begin()    ;
  rEnd = m_MigradPulls.end()      ;
  for (; rItr!=rEnd; ++rItr)
  {
    std::cout << rItr->GetName() << "("<< rItr->GetEntries()<<") "
              <<"mean: " << rItr->GetMean()
              <<", rms: " << rItr->GetRMS()
              <<", xmin/xmax: " << rItr->GetXaxis()->GetXmin() << "/" <<  rItr->GetXaxis()->GetXmax() << std::endl;
    rItr->Write();

  }


  aNewFile.Write();
  aNewFile.Close();

}

template<
  class InputT,
  class FunctionT
  >
void PseudoStudy<InputT,FunctionT>::experiment(){
    
  // if(!m_input){
  //         std::cerr << __FILE__ << ":"<< __LINE__ <<"\t input data object pointer nil\n";
  //   return;}

  setupTotalTemplates();

  FitterResults::HistoResult* histoResult = new FitterResults::HistoResult();
  FitterResults::LLHResult* llhResult = new FitterResults::LLHResult();
  std::ostringstream name;

  setupInput(m_total,m_templateTH1s);
  if(m_verbosity<3){
    std::cout << "\nproto function to fill the data from\n";
    m_total->Print("all");
  }
      
    

  TH1* m_data=0;
  prepareData(m_data);

  int status = 0;
  int numParameters = m_templateTH1s.size();
  int nNon0Status = 0;
  int nMinosFailed = 0;

  double totalData = 1;
  double totalSmearedData = 1;
  double expectationScale =1.;

  double expError=0.;
  double expValue=0.;
  double fitError=0.;
  double fitValue=0.;
  double pullSigma=0.;
    
  std::vector<double> pullValues(numParameters,0.);
  std::vector<double> biasValues(numParameters,0.);
  std::vector<double> MigradPullValues(numParameters,0.);

  std::vector<double> fitSymmErrors(numParameters,0.);
  m_fitValues.clear();m_fitValues.reserve(numParameters);
  fitSymmErrors.clear();fitSymmErrors.reserve(numParameters);
  for (int i = 0; i < (m_iterations); ++i)
  {
    //flush the name
    name.str("");
    name << m_baseName << i;
      

    if(i % 500 == 0)
      std::cout << " iteration " << i << "/" << m_iterations << std::endl;

    //scale b content and
    // add all MC histos according to the just fitted fractions to give pseudo data
    totalData = TMath::Abs(m_dataIntegral);
                  
    if(m_dataIntegral<0)
      createScaledData(m_data,totalData);
    else{
      totalSmearedData =  m_TRand3.Poisson(totalData);
      createScaledData(m_data,totalSmearedData);
      expectationScale = totalSmearedData/totalData;
    }

    if(m_verbosity<3){
      std::cout << "\nsampled data\n";
      m_data->Print("all");
    }


    //feed m_input with pseudo data
    setupData(m_data);

    //init the fitter
    core::FitCore<FunctionT,InputT,FitterResults::AbsResult> aFitter(m_input);
    aFitter.configureFromFile(m_fitConfigFile);
    aFitter.configureKeyWithValue("Engine",m_fitEngine);
    aFitter.configureKeyWithValue("Mode",m_fitMode);
    aFitter.setupMachinery();

    this->treatFitterConfiguration(aFitter.getConfiguration());

    //run the fitter on data from the input file
    if(m_verbosity>2)
      status = aFitter.fit(false);
    else
      status = aFitter.fit(true);
      
      

    if(status!=0){
      nNon0Status++;
      std::cout << "fitter status:\t"<< status << std::endl;
      if(m_doPanicPrint){
        name << "_failed";
        preparePlots(name.str(),histoResult,llhResult);
          
            
        if(m_verbosity<3){
          aFitter.printTo(histoResult);
          aFitter.printTo(llhResult);
        }
          
      }
    }
    else{
      name << "_success";
      preparePlots(name.str(),histoResult,llhResult);
      if(i % 5000 == 0 && m_verbosity<3){
        aFitter.printTo(histoResult);
        aFitter.printTo(llhResult);
      }
    }

    //if the fit converged, collect the results
    if(!(status!=0)){
      //collect the errors
      aFitter.getMinosErrorSet(m_fitErrorsStatus,m_fitErrorsDown,m_fitErrorsUp);
      m_fitValues.clear();
      m_fitValues.resize(aFitter.getFitResults()->size(),0.);
      std::copy(aFitter.getFitResults()->begin()      ,
                aFitter.getFitResults()->end()        ,
                m_fitValues.begin());

      std::copy(aFitter.getFitSymmetricErrors()->begin()      ,
                aFitter.getFitSymmetricErrors()->end()        ,
                fitSymmErrors.begin());

      //collect the results
      m_maxLLH->Fill(aFitter.getMinimizer()->MinValue());
      double pullSigma = 0.;
        
      //fill correlations
      fillCorrelations();
      bool MinosSuccess = false;
      for (int i = 0; i < numParameters; ++i,MinosSuccess = false)
      {
         
        m_means[i].Fill(m_fitValues[i]);
        fitError = fitSymmErrors[i];
        expError = m_expectedErrors[i];
        expValue = m_expectedValues[i];

        
        try{
          MinosSuccess = (TMath::Abs(m_fitErrorsStatus.at(i)) != 0) ? false : true;
        }
        catch(std::exception& exc){
          MinosSuccess = false;
        }

        if(MinosSuccess){
          m_sigmas[i].Fill(TMath::Abs(std::max(TMath::Abs(m_fitErrorsDown[i]),m_fitErrorsUp[i])));
            
          if(m_fitValues[i]>(expValue))
            pullSigma  = TMath::Abs(m_fitErrorsDown[i]);
          else
            pullSigma = TMath::Abs(m_fitErrorsUp[i]);

          biasValues[i] = m_fitValues[i] - expValue ;

          if(pullSigma!=0.)
            pullValues[i] = (expValue - m_fitValues[i])/(pullSigma);
        }
        else{
          nMinosFailed++;
          m_sigmas[i].Fill(fitSymmErrors[i]);
          //pullSigma = fitSymmErrors[i];
        }


        if(fitError!=0.)
          MigradPullValues[i] = ((m_expectedValues[i]) - m_fitValues[i])/(fitError);

        // std::cout << "fit results: "<< totalSmearedData <<" (" <<totalData <<")\n"
        //           << i << ": (fit)\t" << m_fitValues[i] << " +/- " << pullSigma << " (Migrad: "<< aFitter.getMinimizer()->Errors()[i] <<")\n"
        //           << "(expect)\t"<< expectationScale*m_expectedValues[i] << " ["<<m_expectedValues[i] <<"] +/- " << expectationScale*m_expectedErrors[i] << "\n";
      }

      for (int i = 0; i < pullValues.size(); ++i)
      {
        m_pulls[i].Fill(pullValues[i]);
        m_bias[i].Fill(biasValues[i]);
        m_MigradPulls[i].Fill(MigradPullValues[i]);
      }
    }

    //clean-up data
    m_data->Reset("MICE");
    m_data->ResetStats(); 
      
    if(i<1){
      treatResultsFromMinimizer(aFitter.getParameterNames());
      treatCorrelationResults(aFitter.getParameterNames());
    }
  }
  double irregulars = (nNon0Status/double(m_iterations))*100;
  std::cout << nNon0Status<< "/" <<m_iterations << " = ("<< std::setprecision(2) <<irregulars <<" %) were irregular!\n";
  std::cout << nMinosFailed<< "/" <<m_iterations*m_templateTH1s.size() << " = ("<< std::setprecision(2) <<irregulars <<" %) where Minos failed!\n";

  delete histoResult;histoResult=0;
  delete llhResult;llhResult=0;
   
}
