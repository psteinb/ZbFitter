
// Constructors/Destructors
//  

template <class Fcn, class Scr, class Res>
void core::FitCore<Fcn,Scr,Res>::setupMachinery(){
  
  if(isConfigured("Engine") && isConfigured("Mode"))
    m_minimizer = ROOT::Math::Factory::CreateMinimizer(m_config["Engine"], m_config["Mode"]);
  else{
    throw std::runtime_error("FitCore::setupMachinery for neither engine nor mode was configured");
  }

  if(isConfigured("MaxFunCalls"))
    m_minimizer->SetMaxFunctionCalls(getIntFromString(m_config["MaxFunCalls"]));

  if(isConfigured("MaxIterations"))
    m_minimizer->SetMaxIterations(getIntFromString(m_config["MaxIterations"]));

  if(isConfigured("Tolerance"))
    m_minimizer->SetTolerance(getDoubleFromString(m_config["Tolerance"]));

  /////////////////////////////////////////
  /// laod data/templates to Likelihood function
  /////////////////////////////////////////
  loadDataToFunction();

  
  // Set the free variables to be minimized!
  /////////////////////////////////////////
  /// FIXME: need to automise the following, current implementation hinders manual set of Start/Step/Name through other methods than TEnv
  /////////////////////////////////////////
  
  
  m_minimizer->SetVariable(0,
                           m_config["Parameter1.Name"], 
                           getDoubleFromString(m_config["Parameter1.Start"]),
                           getDoubleFromString(m_config["Parameter1.Step"])
                           );

  m_minimizer->SetVariable(1,
                           m_config["Parameter2.Name"], 
                           getDoubleFromString(m_config["Parameter2.Start"]),
                           getDoubleFromString(m_config["Parameter2.Step"])
                           );

  m_minimizer->SetVariable(2,
                           m_config["Parameter3.Name"], 
                           getDoubleFromString(m_config["Parameter3.Start"]),
                           getDoubleFromString(m_config["Parameter3.Step"])
                           );
  
}

template <class Fcn, class Scr, class Res>
int core::FitCore<Fcn,Scr,Res>::fit(const bool& _verbose){
  int value =0;
  /////////////////////////////////////////
  /// laod data/templates to Likelihood function
  /////////////////////////////////////////
  //loadDataToFunction();

  if(_verbose){
    m_fcn.print();
    m_minimizer->SetPrintLevel(2002);
    //m_fcn.printTemplates();
  }
  /////////////////////////////////////////
  /// provide the Likelihood function
  /////////////////////////////////////////
 
  ROOT::Math::Functor f(m_fcn,m_fcn.getNumberOfParameters());
  m_minimizer->SetFunction(f);
  /////////////////////////////////////////
  /// run the fit
  /////////////////////////////////////////

  TStopwatch watch;
  watch.Start();
  m_minimizer->Minimize(); 
  watch.Stop();
  value = m_minimizer->Status();

  
  /////////////////////////////////////////
  /// present results
  /////////////////////////////////////////
  if( m_result ){
    printTo(m_result);
    
  }
  else{
    if(_verbose){
      m_minimizer->PrintResults();
    }
  }  
  
  if(_verbose){
  std::cout << "FitCore::fit \t  CpuTime = \t"<< std::setw(10) << std::setprecision(6)<< watch.CpuTime() << "\n";
  std::cout << "FitCore::fit \t  RealTime = \t"<< std::setw(10) << std::setprecision(4)<< watch.RealTime() << "\n";
  }
  
  this->runMinos();
  return value;
}



template <class Fcn, class Scr, class Res>
void core::FitCore<Fcn,Scr,Res>::printTo(Res* _result=0){
  if(_result){
    _result->setMinimizer(dynamic_cast<ROOT::Math::Minimizer*>(m_minimizer));
    _result->setFunction(dynamic_cast< Fcn* >(&m_fcn));
    _result->setMinosResults(m_minosStatus,m_minosUp,m_minosDown);
    _result->print();
    
  }
  else
    throw std::runtime_error("FitCore::printTo AbsResult pointer invalid");
}

template <class Fcn, class Scr, class Res>
void core::FitCore<Fcn,Scr,Res>::runMinos(){

  m_minosStatus   .resize(m_fcn.getNumberOfParameters(),0);
  m_minosUp       .resize(m_fcn.getNumberOfParameters(),0);
  m_minosDown     .resize(m_fcn.getNumberOfParameters(),0);
  bool minosStatus = false;
  double dUp = 0;
  double dDown = 0;
  int iStatus = 0;

  for (int i = 0; i < m_fcn.getNumberOfParameters(); ++i)
  {
    minosStatus = false;
    minosStatus = m_minimizer->GetMinosError(i,dDown,dUp,iStatus);
    m_minosDown[i] = dDown;
    m_minosUp[i] = dUp;
    
    if(!minosStatus){
      m_minosStatus[i] = (-1)*iStatus;
      std::cout << "MINOS\tFAILED TO GET ERRORS FOR: parameter " << i 
                << "\t[minos status: "<<m_minosStatus[i] <<"], [error: "<<iStatus <<"]\n" 
                << "\t\tFCN: " << m_minimizer->MinValue() 
                << ", fitted: " << m_minimizer->X()[i]
                << ", fittedError: " << m_minimizer->Errors()[i]<< std::endl ;}
    else
      m_minosStatus[i] = iStatus;
  }

}
//  
// Methods
//  


// Accessor methods
//  


// Other methods
//  


