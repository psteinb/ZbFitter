
// Constructors/Destructors
//  

template <class Fcn, class Scr, class Res>
void core::FitCore<Fcn,Scr,Res>::setupMachinery(){
  
  if(isConfigured("Engine") && isConfigured("Mode"))
    m_minimizer = ROOT::Math::Factory::CreateMinimizer(m_config["Engine"], m_config["Mode"]);
  else{
    throw std::runtime_error("FitCore::setupMachinery for neither engine nor mode was configured");
  }

  if(isConfigured("MaxFunCalls"))
    m_minimizer->SetMaxFunctionCalls(getIntFromString(m_config["MaxFunCalls"]));

  if(isConfigured("MaxIterations"))
    m_minimizer->SetMaxIterations(getIntFromString(m_config["MaxIterations"]));

  if(isConfigured("Tolerance"))
    m_minimizer->SetTolerance(getDoubleFromString(m_config["Tolerance"]));
  
  // Set the free variables to be minimized!
  /////////////////////////////////////////
  /// FIXME: need to automise the following, current implementation hinders manual set of Start/Step/Name through other methods than TEnv
  /////////////////////////////////////////

  m_minimizer->SetVariable(0,
                           m_environment.GetValue("Parameter1.Name","fb"), 
                           m_environment.GetValue("Parameter1.Start",0.1),
                           m_environment.GetValue("Parameter1.Step",0.1));

  m_minimizer->SetVariable(1,
                           m_environment.GetValue("Parameter2.Name","fc"), 
                           m_environment.GetValue("Parameter2.Start",0.1),
                           m_environment.GetValue("Parameter2.Step",0.1));

  m_minimizer->SetVariable(2,
                           m_environment.GetValue("Parameter3.Name","fl"), 
                           m_environment.GetValue("Parameter3.Start",0.1),
                           m_environment.GetValue("Parameter3.Step",0.1));
  



  
}

template <class Fcn, class Scr, class Res>
void core::FitCore<Fcn,Scr,Res>::fit(const bool& _verbose){
  /////////////////////////////////////////
  /// laod data/templates to Likelihood function
  /////////////////////////////////////////
  loadDataToFunction();

  if(_verbose){
    m_fcn.print();
    m_minimizer->SetPrintLevel(1001);
  }
  /////////////////////////////////////////
  /// provide the Likelihood function
  /////////////////////////////////////////
 
  ROOT::Math::Functor f(m_fcn,3);
  m_minimizer->SetFunction(f);
  /////////////////////////////////////////
  /// run the fit
  /////////////////////////////////////////

  TStopwatch watch;
  watch.Start();
  m_minimizer->Minimize(); 
  watch.Stop();
  

  
  /////////////////////////////////////////
  /// present results
  /////////////////////////////////////////
  if( m_result ){
    printTo(m_result);
    
  }
  else{
    if(_verbose){
      m_minimizer->PrintResults();
    }
  }  
  

  std::cout << "FitCore::fit \t  CpuTime = \t"<< std::setw(10) << std::setprecision(6)<< watch.CpuTime() << "\n";
  std::cout << "FitCore::fit \t  RealTime = \t"<< std::setw(10) << std::setprecision(4)<< watch.RealTime() << "\n";

}



template <class Fcn, class Scr, class Res>
void core::FitCore<Fcn,Scr,Res>::printTo(Res* _result=0){
  if(_result){
    _result->setMinimizer(dynamic_cast<ROOT::Math::Minimizer*>(m_minimizer));
    _result->setFunction(dynamic_cast< Fcn* >(&m_fcn));
    _result->print();
  }
  else
    throw std::runtime_error("FitCore::printTo AbsResult pointer invalid");
}
//  
// Methods
//  


// Accessor methods
//  


// Other methods
//  


