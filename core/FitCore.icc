
// Constructors/Destructors
//  

template <class Fcn, class Scr, class Res>
void core::FitCore<Fcn,Scr,Res>::setupMachinery(){
  
  if(isConfigured("Engine") && isConfigured("Mode"))
    m_minimizer = new ROOT::Minuit2::Minuit2Minimizer(m_configMap["Mode"].c_str()); 
  //ROOT::Math::Factory::CreateMinimizer(m_configMap["Engine"], m_configMap["Mode"]);
  else{
    throw std::runtime_error("FitCore::setupMachinery for neither engine nor mode was configured");
  }

  if(isConfigured("MaxFunCalls"))
    m_minimizer->SetMaxFunctionCalls(getIntFromString(m_configMap["MaxFunCalls"]));

  if(isConfigured("MaxIterations"))
    m_minimizer->SetMaxIterations(getIntFromString(m_configMap["MaxIterations"]));

  if(isConfigured("Tolerance"))
    m_minimizer->SetTolerance(getDoubleFromString(m_configMap["Tolerance"]));

  
  
  
  //load the param configuration
  std::vector<std::string> dummy;//can be used to set the names from e.g. data
  m_paramConfiguration.init(m_configMap,dummy);
  
  // Set the free variables to be minimized!
  m_paramConfiguration.configureMinimizer(m_minimizer);
  
  /////////////////////////////////////////
  /// load data/templates to Likelihood function
  /////////////////////////////////////////
  loadDataToFunction();
}

template <class Fcn, class Scr, class Res>
int core::FitCore<Fcn,Scr,Res>::fit(const bool& _verbose){
  int value =0;
  /////////////////////////////////////////
  /// laod data/templates to Likelihood function
  /////////////////////////////////////////
  //loadDataToFunction();

  if(_verbose){
    m_paramConfiguration.print();
    m_fcn.print();
    m_minimizer->SetPrintLevel(2002);
    //m_fcn.printTemplates();
  }
  /////////////////////////////////////////
  /// provide the Likelihood function
  /////////////////////////////////////////
 
  ROOT::Math::Functor f(m_fcn,m_fcn.getNumberOfParameters());
  m_minimizer->SetFunction(f);
  /////////////////////////////////////////
  /// run the fit
  /////////////////////////////////////////

  TStopwatch watch;
  watch.Start();
  m_minimizer->Minimize(); 
  watch.Stop();
  value = m_minimizer->Status();

  
  
  if(_verbose){
  std::cout << "FitCore::fit \t  CpuTime = \t"<< std::setw(10) << std::setprecision(6)<< watch.CpuTime() << "\n";
  std::cout << "FitCore::fit \t  RealTime = \t"<< std::setw(10) << std::setprecision(4)<< watch.RealTime() << "\n";
  }
  
  /////////////////////////////////////////
  /// collect/treat results
  /////////////////////////////////////////
  this->runMinos();

  this->collectResults();

  
  if(m_paramConfiguration.getNumberOfParametersConfigured()!=m_paramConfiguration.getNumberOfParameters())
    this->calculateOmittedParameters();


  /////////////////////////////////////////
  /// present results
  /////////////////////////////////////////
  if( m_result ){
    printTo(m_result);
  }
    
  if(_verbose){
    this->print();
  }
  
  return value;
}



template <class Fcn, class Scr, class Res>
void core::FitCore<Fcn,Scr,Res>::printTo(Res* _result=0){
  if(_result){
    _result->setMinimizer(dynamic_cast<ROOT::Math::Minimizer*>(m_minimizer));
    _result->setFunction(dynamic_cast< Fcn* >(&m_fcn));
    _result->setMinosResults(m_minosStatus,m_minosUp,m_minosDown);
    _result->print();
    
  }
  else
    throw std::runtime_error("FitCore::printTo AbsResult pointer invalid");
}

template <class Fcn, class Scr, class Res>
void core::FitCore<Fcn,Scr,Res>::print() const{
  
  std::vector<double>::const_iterator resItr = m_fitResults.begin();
  std::vector<double>::const_iterator resEnd = m_fitResults.end();
  std::cout << "FitResults :\t\n";
  for (short par=0;resItr!=resEnd;++resItr,par++)
  {
    
    std::cout << m_paramConfiguration.getConfiguredNames()->at(par) << ":\t" <<  (*resItr);
    if(TMath::Abs(m_minosStatus[par])<10){
      std::cout << " + " << m_minosUp[par] << " - " <<  TMath::Abs(m_minosDown[par]);
    }
    else
      std::cout << " +/- " << m_fitSymmErrors[par];
    std::cout << "\n";
  }
  std::cout << "sum = " << std::accumulate(m_fitResults.begin(),m_fitResults.end(),0.);
  
}


template <class Fcn, class Scr, class Res>
void core::FitCore<Fcn,Scr,Res>::runMinos(){

  m_minosStatus   .resize(m_paramConfiguration.getNumberOfParameters(),0);
  m_minosUp       .resize(m_paramConfiguration.getNumberOfParameters(),0);
  m_minosDown     .resize(m_paramConfiguration.getNumberOfParameters(),0);
  bool minosStatus = false;
  double dUp = 0;
  double dDown = 0;
  int iStatus = 0;

  for (int i = 0; i < m_paramConfiguration.getNumberOfParametersConfigured(); ++i)
  {
    minosStatus = false;
    minosStatus = m_minimizer->GetMinosError(i,dDown,dUp,iStatus);
    m_minosDown[i] = dDown;
    m_minosUp[i] = dUp;
    
    if(!minosStatus){
      m_minosStatus[i] = (-1)*iStatus;
      std::cout << "MINOS\tFAILED TO GET ERRORS FOR: parameter " << i 
                << "\t[minos status: "<<m_minosStatus[i] <<"], [error: "<<iStatus <<"]\n" 
                << "\t\tFCN: " << m_minimizer->MinValue() 
                << ", fitted: " << m_minimizer->X()[i]
                << ", fittedError: " << m_minimizer->Errors()[i]<< std::endl ;}
    else
      m_minosStatus[i] = iStatus;
  }

}

template <class Fcn, class Scr, class Res>
void core::FitCore<Fcn,Scr,Res>::calculateOmittedParameters(){
  /////////////////////////////////////////
  /// FIXME: for now, this method assumes that all parameters add up to one and that runMinos was called before
  /////////////////////////////////////////
  //define the last parameter
  int lastIdx = m_paramConfiguration.getNumberOfParameters()-1;
  double last = std::accumulate(m_fitResults.begin(),
                                m_fitResults.end(),
                                1.,
                                std::minus<double>()
                                );
  m_fitResults[lastIdx] = last;

  double lastError2Up = 0;
  double lastError2Down = 0;
  double lastError2Symm = 0;
  int lastStatus = 0;
  for (int i = 0; i < m_paramConfiguration.getNumberOfParametersConfigured(); ++i)
  {
    lastError2Up   += (m_minosDown[i]*m_minosDown[i]);
    lastError2Down += (m_minosUp[i]*m_minosUp[i]);
    lastError2Symm += ((m_fitSymmErrors[i]*m_fitSymmErrors[i]));
    lastStatus += TMath::Abs(m_minosStatus[i]);
  }

  m_minosStatus[lastIdx] = lastStatus;
  m_minosUp[lastIdx] = TMath::Sqrt(lastError2Up  );
  m_minosDown[lastIdx] = -1*TMath::Sqrt(lastError2Down);
  m_fitSymmErrors[lastIdx] = TMath::Sqrt(lastError2Symm);

};
//  
// Methods
//  


// Accessor methods
//  


// Other methods
//  


